/*
 * Copyright (C) МО ПНИЭИ 1997-1998
 * Этот файл содержит информацию,
 * являющуюся собственностью МО ПНИЭИ.
 *
 * Любая часть этого файла не может быть скопирована,
 * исправлена, переведена на другие языки,
 * локализована или модифицирована любым способом,
 * откомпилирована, передана по сети с или на
 * любую компьютерную систему без предварительного
 * заключения соглашения с МО ПНИЭИ.
 */

/****
 * $Id: verba.h,v 1.1.1.1 2001/10/08 07:56:23 bon Exp $
 *
 * Интерфейс библиотеки Верба.
 *
 ****/

#ifndef _VERBA_H_INCLUDED
/*+ Для предотвращения многократного включения данного файла +*/
#define _VERBA_H_INCLUDED

/* Если не указана Верба-О, значит просто Верба */
#ifndef _VERBA_O
#define VERBA
#endif /* !_VERBA_O */

/*+ Используется для оформления заголовочных файлов,
 * для возможности включения этих файлов в файлы на C++.
 * В каждом заголовочном файле все описания функций и типов
 * должны быть заключены между __BEGIN_DECLS и __END_DECLS
 +*/
#if defined(__cplusplus)
#define	__BEGIN_DECLS extern "C" {
#else
#define	__BEGIN_DECLS
#endif
/*+ Используется для оформления заголовочных файлов,
 * для возможности включения этих файлов в файлы на C++.
 * В каждом заголовочном файле все описания функций и типов
 * должны быть заключены между __BEGIN_DECLS и __END_DECLS
 +*/
#if defined(__cplusplus)
#define	__END_DECLS };
#else
#define	__END_DECLS
#endif

#ifndef WINAPI
#if (_MSC_VER >= 800) || defined(_STDCALL_SUPPORTED)
#define WINAPI _stdcall
#else /* !(_MSC_VER >= 800) */
#define WINAPI
#endif /* !(_MSC_VER >= 800) */
#endif /* !WINAPI */

#ifndef RC_INVOKED

#define ALG_3410_01 	"1.2.643.2.2.19"
#define	ALG_VERBA_O	"1.3.6.1.4.1.3670.1.9" 
#define	ALG_VERBA	"1.3.6.1.4.1.3670.1.10"

#define SIGN_TAIL_LEN 11
#define FILE_SIGN_LEN 87

#define NAME_LEN  12
#define ALIAS_LEN 120

/* константы результата проверки подписи */
#define CORRECT 0
#define NOT_CORRECT 1
#define OKEY_NOT_FOUND 2

#define CHECK_STASUS_LEN sizeof(Check_Status)

#define MEM_TITLE_LEN  37
#define FILE_KEY_LEN   48

/* для байта типа открытого ключа */
#define WORK_KEY    ' '
#define RES_KEY     'R'
#define COMPR_KEY   'C'

/* для байта статуса проверки открытого ключа */
#define KEY_OK    0
#define BAD_HASH  1
#define BAD_SER   2 /*+ серия открытого ключа не совпадает с серией справочника +*/
#define BAD_IMM   4 /*+ неверная имитовставка на открытый ключ +*/
#define NO_IMM    8 /*+ нет имитовставки на открытый ключ +*/

/* флаги для ExportHash  */
#define EXPORT_DATA     0
#define EXPORT_CONTEXT  1
/* флаги для SignHash*/
#define ADD_SIGN		4
#define SIGN_VER		8
#define SIGN_DEF		16
#define DATA_HASH		32
#define ALG_FROM_OID		64

/* тип используемого KC */
#define	SERIAL 1
#define	COMMON 2
#define AUTO   4
#endif /* !RC_INVOKED */

#define VERBA_BASE_ERROR	0
/* глобальные */
#define E_NO_MEM		1
#define E_CONTROL		2
#define E_DRIVER		3 /*+ ошибка функции драйвера +*/
#define E_IMMITO		4
#define E_CRITICAL		5
#define E_KEY_NOT_FOUND		6 /*+ ключ не найден или искажен +*/
#define E_PARAM			7
#define E_INIT			8
/* память */
#define E_MEM_LENGTH		10
#define E_MEM_NOT_ENCRYPTED	11
#define E_MEM_NOT_SIGNED	12
/* файл */
#define E_OPEN_IN_FILE		21
#define E_OPEN_OUT_FILE		22
#define E_WRITE_FILE		23
#define E_READ_FILE		24
#define E_RENAME_FILE		25
#define E_FILE_LENGTH		26
#define E_SRC			27
#define E_FILE_NOT_ENCRYPTED	29
#define E_FILE_NOT_SIGNED	30
#define E_SEEK			31
#define E_CLOSE			32
#define E_DELETE_FILE		33
/*****/
#define E_GK			34
#define E_KS			35
#define E_DEVICE		36
/* для функции InitKey */
#define E_REDEFINE		37
#define E_NO_FREE_SLOTS		38
#define E_KEY_NOT_SET		39
#define E_GK_R			40
#define E_GK_W			41
/**/
#define ERR_UNSUPPORTED_FORMAT  42

#define VERBA_BASE_SPR_ERROR    100  /*+ Base Spr Err +*/
#ifndef ERR_NO
#define ERR_NO			0
#endif
#define ERR_READ_DSCH		3
#define ERR_NUMP			101  /*+ NUM(P) не соответствует считанному из драйвера +*/
#define ERR_HASH			102
#define ERR_PARAMETR		7
#define ERR_OPEN_SPR		103
#define ERR_OPEN_IMM		104
#define ERR_UZ				105  /*+ ошибка чтения UZ +*/
#define ERR_CKD				106  /*+ ошибка чтения  CKD(I) +*/
#define ERR_IMM_SPR			107  /*+ длины файлов не соответствуют друг другу +*/
#define ERR_READ_SPR		108
#define ERR_WRITE_SPR		109
#define ERR_READ_IMM		110
#define ERR_IMM				111 /*+ неверная имитовставка  +*/
#define ERR_COMPROM			112 /*+ открытый ключ скомпрометирован +*/
#define ERR_CRE_DIR			113
#define ERR_CRE_FILE		114 /*+ ошибка  при создании .IMM(P) или .SPR +*/
#define ERR_EXIST_SPR		115 /*+ в заданном каталоге уже есть файл *.SPR +*/
#define ERR_WRITE_IMM		116
#define ERR_NO_KEY			117 /*+ в справочнике нет заданного открытого ключа +*/
#define ERR_LENGTH			118 /*+ неверная длина  файл  .SPR или .IMM(P) +*/
#define ERR_OPEN_TMP		119 /*+ ошибка открытия временного файла +*/
#define ERR_RENAME			25
#define ERR_SPR_EMPTY		120 /*+ справочник открытых ключей пуст +*/
#define ERR_NO_MEM			1
#define ERR_KEY_HEAD		121 /*+ искажен заголовок открытого ключа +*/
#define ERR_FIND_SPR		122
#define ERR_NO_RES			123 /*+ открытый ключ не является резервным +*/
#define ERR_IMM_HEAD		124 /*+ искажен заголовок файла имитовставок +*/
#define ERR_NO_SIGN			125 /*+ нет имитовставки на открытый ключ +*/
#define ERR_SEEK			31
#define ERR_NO_IMM			126 /*+ нет имитовставки с указанным номером +*/
#define ERR_FLOP			127
#define ERR_SPR_NOT_FOUND	128
#define ERR_BAD_KEY			129
#define ERR_PACK_BUF		130
#define ERR_OTHER_IMM_KEY	131 /*+ имитовставка на справочник выработана на ключе другой серии +*/
#define ERR_BAD_KEY_TYPE    132
#define ERR_ANOTHER_CARRIER 133	/*+ Вставлен другой носитель. +*/

//
/*+ Функция не поддерживается. +*/
#define ERR_UNSUPPORTED 0x1000

/*+ Устройство не подключено или занято. +*/
#define ERR_CONNECT 0x1001

/*+ Отсуствует носитель в считывателе. +*/
#define ERR_NO_CARRIER 0x1002

/*+ Носитель не может быть использован в качестве ключевого или структура носителя
    искажена. +*/
#define ERR_INVALID_MEDIA 0x1003

/*+ Носитель защищен от записи. +*/
#define ERR_WRITE_PROTECT 0x1004

/*+ Введен неправильный пароль. +*/
#define ERR_INVALID_PASSWD 0x1005

/*+ Отказ от выполнения операции. +*/
#define ERR_CANCEL 0x1006

/*+ Нет места на носителе. +*/
#define ERR_FULL 0x1007

/*+ Версия старше 5.0 не поддерживается. +*/
#define ERR_VERSION_1 0x1008
//

/*+ Битовые маски наличия ключей в слоте драйвера. +*/
#define SLOT_STATUS_BASE 0x2 /*+ Если выставлен, то ключи прогружены в слот,
	если сброшен, то слот свободен. +*/
#define SLOT_STATUS_SIGN_BASE 0x4 /*+ Если выставлен, то прогружены базовые
	ключи подписи (nump, ckdi), иначе сброшен. +*/
#define SLOT_STATUS_CRYPT_BASE 0x8 /*+ Если выставлен, то прогружены базовые
	ключи шифрования (num, ckd, ks), иначе сброшен. +*/
#define SLOT_STATUS_SIGN 0x10 /*+ Если выставлен, то в слот загружен ключ
	подписи, иначе сброшен. +*/
#define SLOT_STATUS_CRYPT 0x20 /*+ Если выставлен, то в слот загружен ключ
	шифрования (ассиметричный), иначе сброшен. +*/
#define SLOT_STATUS_1024 0x40 /*+ Если выставлен, то загружен ключ с
	соответствующим открытым 1024, иначе 512. +*/

__BEGIN_DECLS

typedef unsigned char T8bit;
typedef unsigned short T16bit;
typedef unsigned long T32bit;

typedef T8bit * P8bit;
typedef T16bit * P16bit;
typedef T32bit * P32bit;
typedef T32bit TLen;
typedef T32bit * PLen;
typedef struct _USR_KEYS_INFO {
    char num[11];
    char nump[13];
    T16bit keys_status;
    T8bit version_high;
    T8bit version_low;
    T32bit KeySlotNumber;
} USR_KEYS_INFO, *PUSR_KEYS_INFO;

typedef struct _USR_KEYS_INFO_EX {
    char num[11];
    char nump[13];
    T16bit keys_status;
    T8bit version_high;
    T8bit version_low;
    T32bit KeySlotNumber;
    const char *alg;
    T32bit Reserved;
} USR_KEYS_INFO_EX, *PUSR_KEYS_INFO_EX;

/*+ структура в которой возвращаются резутьтаты подписи +*/
typedef struct tagCheck_Status {
    char Name[NAME_LEN + 1];
    char Alias[ALIAS_LEN + 1];
    T8bit Position;
    T8bit Status;
    T32bit Date;
} Check_Status;

typedef Check_Status *Check_Status_Ptr;

/*+ структуры в списке ключей для функций SprList и CheckSpr +*/
typedef struct tagSpr_List {
    char key_id[13]; /*+ идентификатор открытого ключа +*/
    char key_type;  /*+ тип: рабочий, резервный или скомпрометированный +*/
    char key_status;/*+ статус проверки открытого ключа +*/
} Spr_List;

typedef Spr_List * Spr_List_Ptr;

typedef struct _sign_info {
    char nump[13];
    char reg_num[8];
} SIGN_INFO;

typedef void *HASHCONTEXT;

typedef struct	_lic_info
{
 WORD	first_crypt;	
 WORD	last_crypt;
 WORD	sign_nums;

} LIC_INFO;


/*====================================================================*/
/*  Освободить память распределенную библиотекой                      */
/*====================================================================*/
/* lpMemory - указатель полученный в функциях GetCryptKeysF,          */
/*  GetCryptKeysM,...                                                 */
/*====================================================================*/
extern void WINAPI FreeMemory (void * lpMemory);
/*====================================================================*/
/*  Получить идентификатор ключа прогруженного в драйвер              */
/*====================================================================*/
/* curr_id - указатель для строки с идентификатором (11 или 13 байт)  */
/* S_or_E  - символ типа ключа ('S' или 'E')                          */
/*====================================================================*/
extern T16bit WINAPI GetCurrID (char * curr_id, char S_or_E);
/*====================================================================*/
/*  Получить и проверить идентификатор ключа, хранящегося на на ГМД   */
/*====================================================================*/
/* flop_id - указатель для строки с  идентификатором (11 или 13 байт) */
/* S_or_E  - символ типа ключа ('S' или 'E')                          */
/*====================================================================*/
extern T16bit WINAPI GetFlopID (char * flop_id, char S_or_E);
/*====================================================================*/
/*  Получить и проверить идентификатор ключа на сменном носителе      */
/*====================================================================*/
/* key_dev - указатель для строки с  именем ключевого устройства      */
/* key_id - указатель для строки с  идентификатором (11 или 13 байт)  */
/* S_or_E  - символ типа ключа ('S' или 'E')                          */
/*====================================================================*/
extern T16bit WINAPI GetKeyID (char * key_dev, char * key_id, char S_or_E);
/*=========================================================*/
/* Проинициализировать ДСЧ ключем с носителя.              */
/* key_dev - строка с именем ключевого устройства          */
/* window_enable - разрешение (!0) или запрещение (0)      */
/*  выдачи окна инициализации ДСЧ.                         */
/*=========================================================*/
extern T16bit WINAPI InitRndm (char *key_dev, int window_enable );
/*=========================================================*/
/* Загрузить ключи в драйвер ASYNCR                        */
/* key_dev - строка с именем ключевого устройства          */
/* key_ID  - идентификатор ключа или пустая строка ("")    */
/*=========================================================*/
extern T16bit WINAPI InitKey (char *key_dev, char * key_ID);
/*=========================================================*/
/* Выгрузить ключи из драйвера ASYNCR                      */
/* key_ID  - идентификатор ключа                           */
/*=========================================================*/
extern T16bit WINAPI ResetKey (char * key_ID);
/*=========================================================*/
/* Выгрузить ключи из драйвера ASYNCR                      */
/* key_ID - идентификатор ключа                            */
/* flag   - признак возможности выгрузки ключа из "слота"0 */
/* FALSE-выгрузка запрещена, TRUE-разрешена                */
/*=========================================================*/
extern T16bit WINAPI ResetKeyEx (char * key_ID, int flag);
/*=========================================================*/
/* Получить список ключей, загруженных в драйвер ASYNCR    */
/* keys_info - указатель на массив структур с информацией  */
/* о прогруженных ключах                                   */
/* nKeySlots - количество загруженных ключевых "слотов"    */
/* драйвера ASYNCR                                         */
/*=========================================================*/
extern T16bit WINAPI GetDrvInfo (USR_KEYS_INFO *keys_info,
				 P32bit nKeySlots);

/*=========================================================*/
/* Получить список ключей, загруженных в драйвер ASYNCR    */
/* keys_info - указатель на массив структур с информацией  */
/* о прогруженных ключах                                   */
/* nKeySlots - количество загруженных ключевых "слотов"    */
/* драйвера ASYNCR                                         */
/*=========================================================*/
extern T16bit WINAPI GetDrvInfoEx (USR_KEYS_INFO_EX *keys_info,
				 P32bit nKeySlots);

extern T16bit WINAPI WipeFile (char *file_name);

extern T16bit WINAPI SetDevParam (char *dev_name,
    unsigned long flag, unsigned long data_leng,
    unsigned char *data);

/*                                                             */
/*          Форматы обращения к функциям библиотеки подписи    */
/*          _______________________________________________    */
/*                                                             */
/*==============================================================*/
/*            Инициализация                                     */
/*==============================================================*/
/* pathToSecret - полный путь к файлу с секретным ключом подписи*/
/* pathToBase   - полный путь к базе открытых ключей подписи    */
/*==============================================================*/
extern T16bit WINAPI SignInit (char * pathToSecret, char * pathToBase);
/*==============================================================*/
/*            Завершение                                        */
/*==============================================================*/
extern T16bit WINAPI SignDone (void);
/*==============================================================*/
/*        прочитать ключ подписи абонента в память              */
/*==============================================================*/
/*   path    - полный путь к файлу с секретным ключом подписи   */
/*==============================================================*/
extern T16bit WINAPI SignLogIn (char * path);
/*==============================================================*/
/*        удалить ключ подписи из памяти                        */
/*==============================================================*/
extern T16bit WINAPI SignLogOut (void);
/*==============================================================*/
/*         Удаление подписей из файла                           */
/*==============================================================*/
/* file_name - полное имя файла                                 */
/* count     - кол-во удаляемых подписей                        */
/*             (-1)  - удалить все подписи                      */
/*==============================================================*/
extern T16bit WINAPI DelSign (char * file_name, T8bit count);
/*==============================================================*/
/*                         подпись файла                        */
/*==============================================================*/
/* src_file_name- Имя подписываемого файла                      */
/* dst_file_name- имя подписанного файла                        */
/* name     - идентификатор абонента                            */
/*==============================================================*/
extern T16bit WINAPI SignFile (char * src_file_name,
    char * dst_file_name, char * name);
/*==============================================================*/
/*         Проверка подписи под файлом                          */
/*==============================================================*/
/* file_name - полное имя файла                                 */
/* count     - число обнаруженных подписей                      */
/* stat_array- массив результатов проверки каждой подписи       */
/*==============================================================*/
extern T16bit WINAPI check_file_sign (char * file_name, P8bit count,
    Check_Status_Ptr * stat_array);
/*==============================================================*/
/*              подпись блока памяти                            */
/*==============================================================*/
/* block    - Указатель на блок подписываемой памяти            */
/*      память под блок д.б. выделена с запасом под подпись     */
/*      leng + SIGN_TAIL_LEN + FILE_SIGN_LEN для первой подписи */
/*      leng + FILE_SIGN_LEN для любой последующей подписи      */
/*      SIGN_TAIL_LEN = 11;                                     */
/*      FILE_SIGN_LEN = 87;                                     */
/* leng     - длина  подписываемой информации                   */
/* name     - идентификатор ключа подписи                       */
/*==============================================================*/
extern T16bit WINAPI SignMem   (void * block, TLen leng, char * name);
extern T16bit WINAPI SignMemEx (void * block, TLen *leng, char * name);
/*==============================================================*/
/*         Проверка подписи под блоком памяти                   */
/*==============================================================*/
/* block     - Указатель на блок памяти                         */
/* leng      - длина  блока                                     */
/* count     - число обнаруженных подписей                      */
/* stat_array- массив результатов проверки каждой подписи       */
/*==============================================================*/
extern T16bit WINAPI check_mem_sign (void * block, TLen leng,
    P8bit count, Check_Status_Ptr * stat_array);
/*==============================================================*/
/*         Удаление подписей из файла                           */
/*==============================================================*/
/* block - указатель на блок памяти                             */
/* leng  - длина блока                                          */
/* count - кол-во удаляемых подписей                            */
/*             (-1)  - удалить все подписи                      */
/*==============================================================*/
extern T16bit WINAPI Del_Mem_Sign (void * block, PLen leng, T8bit count);
/*==============================================================*/
/* Подпись блока памяти с помещением подписи в отдельный блок   */
/*==============================================================*/
/* block           - блок подписываемой памяти;                 */
/* leng - длина подписываемого блоке памяти                     */
/* sign_block_leng - длина ЗНАЧИМОЙ информации в блоке с        */
/* подписями;                                                   */
/* sign_block      - блок памяти, где хранятся подписи;         */
/* name     - идентификатор ключа подписи                       */
/* В блок для подписей будет записана информация длиной         */
/* SIGN_TAIL_LEN + FILE_SIGN_LEN для первой подписи и           */
/* FILE_SIGN_LEN для последующих подписей.                      */
/* При первом подписывании блока памяти значение sign_block_leng*/
/* должно быть равно нулю, при последующих -                    */
/* - SIGN_TAIL_LEN + (FILE_SIGN_LEN*n).                         */
/*==============================================================*/
extern T16bit WINAPI SignMemSeparate (void * block, TLen leng,
    TLen sign_block_leng, char * name, void * sign_block);
extern T16bit WINAPI SignMemSeparateEx (void * block, TLen leng,
    PLen sign_block_leng, char * name, void * sign_block);
/*==============================================================*/
/* Подпись файла с помещением подписи в отдельный файл          */
/*==============================================================*/
/* src_file_name - имя подписываемого файла                     */
/* name          - идентификатор абонента                       */
/* sign_file     - имя файла с подписями                        */
/*==============================================================*/
extern T16bit WINAPI SignFileSeparate (char * src_file, char * name,
    char * sign_file);
/*==============================================================*/
/* Проверка подписи под файлом при хранении подписей в отдельном*/
/*   файле                                                      */
/*==============================================================*/
/* file_name - имя файла                                        */
/* count     - число обнаруженных подписей                      */
/* stat_array- массив результатов проверки каждой подписи       */
/* sign_file - имя файла с подписями                            */
/*==============================================================*/
extern T16bit WINAPI CheckFileSeparate (char * file_name, P8bit count,
    Check_Status_Ptr *stat_array, char * sign_file);
/*==============================================================*/
/* Проверка подписи под блоком памяти при хранении подписей в   */
/* отдельном блоке                                              */
/*==============================================================*/
/* block - указатель на блок памяти                             */
/* leng - длина блоке памяти                                    */
/* sign_block_leng - длина блока с подписями                    */
/* count     - число обнаруженных подписей                      */
/* stat_array- массив результатов проверки каждой подписи       */
/* block - указатель на блок памяти с подписями                 */
/*==============================================================*/
extern T16bit WINAPI CheckMemSeparate (void * block, TLen leng,
    TLen sign_block_leng, P8bit count,
    Check_Status_Ptr *stat_array, void * sign_block);
/*==============================================================*/
/*            Вычисление хэш функции файла                      */
/*==============================================================*/
/* file_name - полное имя файла                                 */
/* h_out - указатель на массив для хранения 8-х слов T32bit     */
/*==============================================================*/
extern T16bit WINAPI HashFile (char * file_name, P32bit h_out);
/*==============================================================*/
/*            Вычисление хэш функции блока памяти               */
/*==============================================================*/
/* block - указатель на блок памяти                             */
/* leng - длина блока памяти                                    */
/* h_out - указатель на массив для хранения 8-и слов T32bit     */
/*==============================================================*/
extern T16bit WINAPI HashMem (void * buff, TLen leng, P32bit h_out);

extern T16bit WINAPI check_file_sign_ex (char * file_name,
        void **open_keys_array, unsigned long open_keys_quantity,
        unsigned char *count, Check_Status_Ptr *status_array);

extern T16bit WINAPI CheckMemSeparateEx (void *ptr, unsigned long leng,
    void *sign_block, unsigned long sign_block_leng,
    void **open_keys_array, unsigned long open_keys_quantity,
    unsigned char *count, Check_Status_Ptr *status_array);

extern T16bit WINAPI GetFileSignInfo (char *file_name, SIGN_INFO **ID_array,
    unsigned long *ID_count);

extern T16bit WINAPI GetMemSignInfo (void *mem_adr, unsigned long leng,
   SIGN_INFO **ID_array, unsigned long *ID_count);

/*====================================================================*/
/*            Инициализация                                           */
/*====================================================================*/
/* path - указатель на строку полного пути к секретным ключам         */
/* base_path - указатель на строку полного пути к открытым ключам     */
/*             NULL, если ключи симметричные                          */
/*====================================================================*/
extern T16bit WINAPI CryptoInit (char * path, char * base_path);
/*====================================================================*/
/*            Завершение                                              */
/*====================================================================*/
extern T16bit WINAPI CryptoDone(void);

/*====================================================================*/
/*            Зашифрование файлов                                     */
/*====================================================================*/
/* file_in   - открытый файл                                          */
/* file_out  - зашифрованный файл                                     */
/* node_From - свой идентификатор                                     */
/* node_To   - список криптографических номеров получателей,          */
/* ser       - номер подсети(серии), куда направляется файл           */
/*====================================================================*/
extern T16bit WINAPI EnCryptFile (char * file_in, char * file_out,
    T16bit node_From, P16bit node_To, char * ser);
/*====================================================================*/
/*            Расшифрование файлов                                    */
/*====================================================================*/
/* file_in   - Зашифрованный файл                                     */
/* file_out  - расшифрованный файл                                    */
/* abonent   - номер получателя                                       */
/*====================================================================*/
extern T16bit WINAPI DeCryptFile (char * file_in, char * file_out,
    T16bit abonent);
/*====================================================================*/
/*     получить список абонентов, которым адресован файл              */
/*====================================================================*/
/* file_name - Зашифрованный файл                                     */
/* abonents  - число получателей                                      */
/* user_list - список абонентов                                       */
/* ser       - номер подсети(серии), откуда направлен файл            */
/*====================================================================*/
extern T16bit WINAPI GetCryptKeysF (char * file_name, P16bit abonents,
    P16bit* user_list, char * ser);
/*====================================================================*/
/*     получить список абонентов, которым адресован блок памяти       */
/*====================================================================*/
/* block     - Зашифрованный блок                                     */
/* leng      - длина блока                                            */
/* abonents  - число получателей                                      */
/* user_list - список абонентов                                       */
/* ser       - номер подсети(серии), откуда направлен блок            */
/*====================================================================*/
extern T16bit WINAPI GetCryptKeysM (void * block, TLen leng,
    P16bit abonents, P16bit* user_list, char * ser);
/*====================================================================*/
/*            Расшифрование блока памяти                              */
/*====================================================================*/
/* buffer - указатель на буфер для расшифрования                      */
/* leng   - длина этого буфера                                        */
/* abonent- номер получателя                                          */
/*====================================================================*/
extern T16bit WINAPI DeCryptMem (void * buffer, PLen leng, T16bit abonent);
/*====================================================================*/
/*                     Зашифрование блока памяти                      */
/*====================================================================*/
/* in_mem_buf - указатель на блок шифруемой памяти                    */
/* length   - длина блока                                             */
/* out_mem_buf- указатель на блок зашифрованной памяти                */
/*              д.б. выделен (длина_информации + MEM_TITLE_LEN +      */
/*              + FILE_KEY_LEN * Abonents), где                       */
/*              MEM_TITLE_LEN == 37                                   */
/*              FILE_KEY_LEN  == 48                                   */
/*              Abonents      == число получателей                    */
/* node_From- свой идентификатор                                      */
/* node_To  - список криптографических номеров получателей,           */
/* ser      - номер подсети(серии), куда направляется файл            */
/*====================================================================*/
extern T16bit WINAPI EnCryptMem (void * in_mem_buf, TLen leng,
    void * out_mem_buf, T16bit node_From, P16bit node_To, char * ser);
/*====================================================================*/
/*        Получить последовательность случайных байт                  */
/*====================================================================*/
/* buff- указатель на буфер для случайной последовательности          */
/* rnd_size - длина случайной последовательности                      */
/*====================================================================*/
extern T16bit WINAPI Rndm (void * buff, TLen rnd_size);
/*====================================================================*/
/*        Получить идентификатор ключа абонента, зашифровавшего файл  */
/*====================================================================*/
/* path - путь к зашифрованному файлу                                 */
/* sender_id - указатель для строки с 10-байтовым идентификатором     */
/*====================================================================*/
extern T16bit WINAPI GetFileSenderID (char * path, char * sender_id);
/*====================================================================*/
/*  Получить идентификатор ключа абонента, зашифровавшего блок памяти */
/*====================================================================*/
/* mem_block указатель на блок зашифрованной памяти                   */
/* leng - длина блока                                                 */
/* sender_id - указатель для строки с 10-байтовым идентификатором     */
/*====================================================================*/
extern T16bit WINAPI GetMemSenderID (void * mem_block, TLen leng,
    char * sender_id);
/*====================================================================*/
/*        Вычислить имитовставку блока памяти на пароле               */
/*====================================================================*/
/* buff - указатель на блок памяти                                    */
/* sender_id - указатель для строки с идентификатором                 */
/* leng - длина блока памяти                                          */
/* password - указатель на 32-х байтовый пароль                       */
/* imito_out - указатель для 4-х байтовой имитовставки                */
/*====================================================================*/
extern T16bit WINAPI ImitoMemOnPassword (void * buff, TLen leng,
    void * password, P32bit imito_out);
/*====================================================================*/
/*        Вычислить имитовставку файла на пароле                      */
/*====================================================================*/
/* path - путь к файлу                                                */
/* password - указатель на 32-х байтовый пароль                       */
/* imito_out - указатель для 4-х байтовой имитовставки                */
/*====================================================================*/
extern T16bit WINAPI ImitoFileOnPassword (char * path, void * password,
    P32bit imito_out);
/*====================================================================*/
/*        Вычислить имитовставку файла на GK                          */
/*====================================================================*/
/* path - путь к файлу                                                */
/* my_ID - указатель на 10-байтовый идентификатор ключа шифрования    */
/*                                                           абонента */
/* imito_out - указатель для 4-х байтовой имитовставки                */
/*====================================================================*/
extern T16bit WINAPI ImitoFileOnGk (char * path, char * my_ID,
    P32bit imito_out);
/*====================================================================*/
/*        Вычислить имитовставку блока памяти  на парном ключе связи  */
/*====================================================================*/
/* buff - указатель на блок памяти                                    */
/* leng - длина блока памяти                                          */
/* From - номер отправителя                                           */
/* To   - номер получателя                                            */
/* imito_out - указатель для 4-х байтовой имитовставки                */
/* ser       - номер подсети(серии)                                   */
/*====================================================================*/
extern T16bit WINAPI ImitoMem (void * buff, TLen leng, T16bit From, T16bit To,
    P32bit imit_out, char * ser);
/*====================================================================*/
/*        Вычислить имитовставку файла на парном ключе связи          */
/*====================================================================*/
/* path - путь к файлу                                                */
/* From - номер отправителя                                           */
/* To   - номер получателя                                            */
/* imito_out - указатель для 4-х байтовой имитовставки                */
/* ser       - номер подсети(серии)                                   */
/*====================================================================*/
extern T16bit WINAPI ImitoFile (char * path, T16bit From, T16bit To,
    P32bit imit_out, char * ser);

/*====================================================================*/
/*            Зашифрование файлов                                     */
/*====================================================================*/
/* file_in   - открытый файл                                          */
/* file_out  - зашифрованный файл                                     */
/* From - идентификатор ключа отправителя ("XXXXSSSSSS")              */
/* open_keys_array   - массив указателей на открытые ключи получателей*/
/* open_keys_quantity - количество получателей                        */
/*====================================================================*/
extern T16bit WINAPI EnCryptFileEx (char * file_in, char * file_out,
    char *From, 
	void **open_keys_array, T16bit open_keys_quantity,T32bit flags);

/*====================================================================*/
/*            Расшифрование файлов                                    */
/*====================================================================*/
/* file_in  - Зашифрованный файл                                      */
/* file_out - расшифрованный файл                                     */
/* abonent  - идентификатор ключа  получателя("XXXXSSSSSS")           */
/* pub_key  - указатель на открытый ключ отправителя                  */
/*====================================================================*/
extern T16bit WINAPI DeCryptFileEx (char * file_in, char * file_out,
    char *abonent, void *pub_key);

/*====================================================================*/
/*                     Зашифрование блока памяти                      */
/*====================================================================*/
/* in_mem_buf - указатель на блок шифруемой памяти                    */
/* leng   - указатель на длину блока                                  */
/* out_mem_buf- указатель на блок зашифрованной памяти                */
/*              д.б. выделен (длина_информации + MEM_TITLE_LEN +      */
/*              + FILE_KEY_LEN * Abonents), где                       */
/*              MEM_TITLE_LEN == 37                                   */
/*              FILE_KEY_LEN  == 48                                   */
/*              Abonents      == число получателей                    */
/* From - идентификатор ключа отправителя ("XXXXSSSSSS")              */
/* open_keys_array   - массив указателей на открытые ключи получателей*/
/* open_keys_quantity - количество получателей                        */
/*====================================================================*/
extern T16bit WINAPI EnCryptMemEx (void * in_mem_buf, PLen leng,
    void * out_mem_buf, char *From,
    void **open_keys_array, T16bit open_keys_quantity, T32bit flags);

/*====================================================================*/
/*            Расшифрование блока памяти                              */
/*====================================================================*/
/* buffer - указатель на буфер для расшифрования                      */
/* leng   - длина этого буфера                                        */
/* abonent- идентификатор ключа  получателя("XXXXSSSSSS")             */
/* pub_key- указатель на открытый ключ отправителя                    */
/*====================================================================*/
extern T16bit WINAPI DeCryptMemEx (void * buffer, PLen leng,
    char *abonent,void *pub_key);

/* ------------------------------------------------------- */
/* Форматы обращения к функциям работы с открытыми ключами */
/* ------------------------------------------------------- */

/*=========================================================*/
/*  Получить текстовые атрибуты открытого ключа по его     */
/*  идентификатору                                         */
/* base_dir - базовый путь к справочнику открытых ключей   */
/* open_key_ID - идентификатор открытого ключа             */
/* Alias - текстовые атрибуты открытого ключа (121 байт)   */
/*=========================================================*/
extern T16bit WINAPI GetAlias (char * base_dir,char * open_key_ID,
    char * Alias);
/*=========================================================*/
/*  Получить идентификатор открытого ключа по его          */
/*  текстовым атрибутам                                    */
/* base_dir - базовый путь к справочнику открытых ключей   */
/* open_key_ID - идентификатор открытого ключа             */
/* Alias - текстовые атрибуты открытого ключа              */
/* ser - серия справочника                                 */
/* S_or_E - тип открытого ключа ( 'S' - открытый ключ      */
/* подписи ; 'E'- открытый ключ шифрования )               */
/*=========================================================*/
extern T16bit WINAPI GetID (char * base_dir, char * Alias,
    char * ser, char S_or_E, char * open_key_ID);
/*=========================================================*/
/*         Добавить открытый ключ в справочник             */
/* base_dir - базовый путь к справочнику открытых ключей   */
/* open_key - указатель на блок памяти с открытым ключем   */
/* my_ID    - идентификатор секретного ключа подписи       */
/* (шифрования) абонента  ( "свой" идентификатор )         */
/* S_or_E - тип открытого ключа                            */
/*=========================================================*/
extern T16bit WINAPI AddOpenKey (char * base_dir, void * open_key,
    char * my_ID, char S_or_E);
/*=========================================================*/
/* Удалить открытый ключ из  справочника                   */
/* base_dir - базовый путь к справочнику открытых ключей   */
/* open_key_ID - идентификатор открытого ключа             */
/* my_ID - свой идентификатор ключа                        */
/* S_or_E - тип открытого ключа                            */
/*=========================================================*/
extern T16bit WINAPI DelOpenKey (char * base_dir,
    char * open_key_ID, char * my_ID, char S_or_E);
/*=========================================================*/
/* Проверить открытый ключ в справочнике                   */
/* base_dir - базовый путь к справочнику открытых ключей   */
/* open_key_ID - идентификатор открытого ключа             */
/* my_ID - свой идентификатор ключа                        */
/* S_or_E - тип открытого ключа                            */
/*=========================================================*/
extern T16bit WINAPI CheckOpenKey(char * base_dir,
    char * open_key_ID, char * my_ID,char S_or_E);
/*=========================================================*/
/*  Получить список ключей в справочнике                   */
/* base_dir - базовый путь к справочнику открытых ключей   */
/* ser - серия справочника                                 */
/* list - указатель на список ключей                       */
/* num - количество ключей в справочнике                   */
/* S_or_E - тип справочника                                */
/*=========================================================*/
extern T16bit WINAPI SprList (char * base_dir, char * ser,
    Spr_List_Ptr *list, P16bit num, char S_or_E);
/*=========================================================*/
/* Удалить из справочника открытый ключ с заданным         */
/* порядковым номером                                      */
/* base_dir - базовый путь к справочнику открытых ключей   */
/* ser - серия справочника                                 */
/* num - порядковый номер открытого ключа в справочнике    */
/* S_or_E - тип открытого ключа                            */
/*=========================================================*/
extern T16bit WINAPI DelKeyByNum (char * base_dir, char * ser,
    T16bit num, char S_or_E);
/*=========================================================*/
/* Удалить имитовставку на открытый ключ с заданным        */
/* порядковым номером                                      */
/* base_dir - базовый путь к справочнику открытых ключей   */
/* ser - серия справочника                                 */
/* num - порядковый номер открытого ключа в справочнике    */
/* my_ID - свой идентификатор ключа                        */
/* S_or_E - тип открытого ключа                            */
/*=========================================================*/
extern T16bit WINAPI DelImitByNum (char * base_dir, char * ser,
    T16bit num, char * my_ID, char s_or_e);
/*=========================================================*/
/* Проверить открытый ключ с заданным порядковым номером   */
/* base_dir - базовый путь к справочнику открытых ключей   */
/* ser - серия справочника                                 */
/* num - порядковый номер открытого ключа в справочнике    */
/* my_ID - свой идентификатор ключа                        */
/* S_or_E - тип открытого ключа                            */
/*=========================================================*/
extern T16bit WINAPI CheckKeyByNum (char * base_dir, char * ser,
    T16bit num, char * my_ID, char S_or_E);
/*=========================================================*/
/*  Проверить справочник открытых ключей                   */
/* base_dir - базовый путь к справочнику открытых ключей   */
/* ser - серия справочника                                 */
/* list - список ключей                                    */
/* num - количество ключей в справочнике                   */
/* S_or_E - тип справочника                                */
/*=========================================================*/
extern T16bit WINAPI CheckSpr (char * base_dir, char * ser,
    Spr_List_Ptr *list, P16bit num, char * my_ID,
    char s_or_e);
/*=========================================================*/
/* Подписать справочник открытых ключей                    */
/* base_dir - базовый путь к справочнику открытых ключей   */
/* ser - серия справочника                                 */
/* my_ID - свой идентификатор ключа                        */
/* S_or_E - тип справочника открытых ключей                */
/*=========================================================*/
extern T16bit WINAPI SignSpr (char * base_dir, char * ser,
    char * my_ID, char S_or_E);
/*=========================================================*/
/*  Получить открытый ключ из справочника                  */
/* base_dir - базовый путь к справочнику открытых ключей   */
/* open_key_ID - идентификатор открытого ключа             */
/* key - указатель на буфер для открытого ключа(240 байт)  */
/*=========================================================*/
extern T16bit WINAPI ExtractKey (char * base_dir,
    char * open_key_ID, void * key);
/*=========================================================*/
/* Сменить тип открытого ключа в справочнике с резервного  */
/* на рабочий                                              */
/* base_dir - базовый путь к справочнику открытых ключей   */
/* open_key_ID - идентификатор открытого ключа             */
/* my_ID - свой идентификатор ключа                        */
/* S_or_E - тип открытого ключа                            */
/*=========================================================*/
extern T16bit WINAPI Res2Work (char * base_dir, char * open_key_ID,
    char * my_ID, char S_or_E);
extern T16bit WINAPI OpenKeyCompromise(char * base_dir, char * open_key_ID,
				       char S_or_E);
/*=========================================================*/
/* Проверить хэш-функцию открытого ключа                   */
/* open_key - буфер для  открытого ключа                   */
/* hash_adr - буфер для  хэш-функции открытого ключа       */
/*=========================================================*/
extern T16bit WINAPI CheckKeyHash (void * open_key,
    void * hash_adr);


/*=========================================================*/
/* Загрузка лицензии с ключевого устройства dev. Информация*/
/* о разрешенных лицензией номерах генерируемых ключей     */
/* возвращается в массиве структур info. Память под массив */
/* распределяется самой функцией.                          */
/* Перед вызовом функции должен быть инициализирован ДСЧ.  */
/*=========================================================*/
extern T16bit WINAPI	LoadLicense(char *dev, LIC_INFO **info, 
			    T32bit *nrecords, char *seria, 
                            T32bit reserved);

/* Выгрузка лицензии и освобождение памяти */
extern void	WINAPI 	UnLoadLicense();

/* Флаг генерации ключей: генерация ключа подписи  */
#define VERBA_KEY_GEN_SIGN 0x16
/* Флаг генерации ключей: генерация ключа шифрования*/
#define VERBA_KEY_GEN_CRYPT 0x2A
/* Флаг генерации ключей: генерация ключа подписчи и ключа шифрования*/
#define VERBA_KEY_GEN_BOTH \
( VERBA_KEY_GEN_SIGN | VERBA_KEY_GEN_CRYPT)

/*===================================================================*/
/* Генерация секретных и открытых  ключей.                           */ 
/* dev       - носитель для записи секретных ключей                  */
/* flags     - флаги                                                 */
/* key_num   - номер генерируемого ключа шифрования и(или) подписи   */
/* pub_sign  - буфер для открвтого ключа подпси                      */
/* pub_crypt - буфер для открвтого ключа шифрования                  */
/* pub_text  - текстовая информация открытого ключа                  */
/* alg_id    - идентификатор алгоритма для генерации открытых ключей */
/* reserved  - зарезервированный параметр                            */
/*===================================================================*/
extern T16bit WINAPI	GenKeys(char *dev, ULONG flags,
			char *key_num,
			BYTE *pub_sign,
			BYTE *pub_crypt,
			char *pub_text,
			char *alg_id,
			void *reserved);


/* Флаг подготовки ключей для хранения на ЖМД: ключ подписи */
#define VERBA_KEY_SET_CRYPT VERBA_KEY_GEN_SIGN
/* Флаг подготовки ключей для хранения на ЖМД: ключ подписи */
#define VERBA_KEY_SET_SIGN VERBA_KEY_GEN_CRYPT 
/* Флаг подготовки ключей для хранения на ЖМД: ключ подписи и ключ шифрования */
#define VERBA_KEY_SET_BOTH VERBA_KEY_GEN_BOTH

/*===================================================================*/
/* Подготовка ключей для хранения на ЖМД                             */
/* dev      - ключевой носитель                                      */
/* reserved - зарезервированный параметр (должен передаваться NULL)  */
/* flags    - флаги                                                  */
/* out      - путь для записи ключей для хранения на ЖМД             */
/* num      - номер ключа перешифрования                             */
/*===================================================================*/
extern T16bit WINAPI verba_key_set(
    char   *dev,
    void   *reserved,
    T32bit *flags,
    char   *out,
    char   *num );

extern T16bit  WINAPI
PKCSVerifyMessageSignature(
			   void *data, int szdata, 
			   void *PKCSsign, int szPKCSsign, 
			   void *cert, int szsert,
			   void *plaindata,
			   int	*szplaindata
			   );

extern T16bit WINAPI CheckOpenKeyBuff( void *open_key,void *hash,char *key_type);
extern T16bit WINAPI CreateHash(HASHCONTEXT *phHash, const char *alg_id, T32bit dwFlags);
extern T16bit WINAPI DestroyHash(HASHCONTEXT hHash);
extern T16bit WINAPI HashData(HASHCONTEXT hHash, const T8bit  *pbData,
                              T32bit dwDataLen,T32bit dwFlags);
extern T16bit WINAPI GetHash(HASHCONTEXT hHash,T8bit  *pbData,
                                P32bit dwDataLen,T32bit dwFlags);

extern T16bit WINAPI DuplicateHash( HASHCONTEXT hHash, HASHCONTEXT *phHash, 
									T32bit dwFlags);

extern T16bit WINAPI SetHash(HASHCONTEXT hHash,T8bit  *pbData,
                                T32bit dwDataLen,T32bit dwFlags);

extern T16bit WINAPI SignHash(HASHCONTEXT hHash, char *key_ID, 
                           T8bit *pbSignature, T32bit *dwSigLen, T32bit dwFlags);

extern T16bit WINAPI VerifySignature(HASHCONTEXT hHash, 
						const T8bit *pbSignature,T32bit dwSigLen,
						void **open_keys_array, T32bit open_keys_quantity,
						Check_Status_Ptr *status_array,P32bit sig_count,
						T32bit dwFlags);

extern T16bit WINAPI GetCryptKeysFEx (char *file_name, P16bit abonents, char ** user_list, DWORD *flags);

const char *EnumAlg(T32bit index,T32bit flags,void *reserved);

//для Вербы-О
extern T16bit WINAPI ComputeCommonSecret (
char *key_ID, /* Номер секретного ключа (ключ берется толко из драйвера)*/
void *peer_pub_key, /* открытый ключ(целиком)*/
T32bit dwPubLen,    /* длина буфера с открытый ключем в байтах */ 
T8bit *pbSecret, /* Переменная, в которую записывать адрес буфера, 
куда помещается результат*/
T32bit *dwSecLen /* Переменная, в которую записывать длину результата в байтах 
(на входе - длина зарезервированного буфера)*/
);



__END_DECLS

#endif /* _VERBA_H_INCLUDED */
